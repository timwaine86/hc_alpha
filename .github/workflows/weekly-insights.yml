name: weekly-insights

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'  # Mondays 06:00 UTC

permissions:
  contents: read

concurrency:
  group: weekly-insights-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  weekly_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas python-dateutil python-dotenv requests numpy openai==1.51.2 tenacity
          # video tools
          pip install yt-dlp
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 1) Start Apify actor (async) -> poll until SUCCEEDED -> download CSV
      - name: Fetch MAS+ data from Apify (async poll)
        env:
          APIFY_TOKEN: ${{ secrets.APIFY_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p pipeline
          OUT_RAW="pipeline/latest_posts_raw.csv"
          RUN_JSON="pipeline/apify_run.json"

          JSON_PAYLOAD='{"username":["masbymessi"],"maxItems":30,"proxy":{"useApifyProxy":true}}'

          curl -sS -X POST \
            -H "Authorization: Bearer ${APIFY_TOKEN}" \
            -H "Content-Type: application/json" \
            "https://api.apify.com/v2/acts/apify~instagram-post-scraper/runs?token=${APIFY_TOKEN}" \
            -d "${JSON_PAYLOAD}" \
            -o "${RUN_JSON}"

          RUN_ID=$(python -c 'import json,sys; d=json.load(open(sys.argv[1])); print(d.get("data",{}).get("id",""))' "${RUN_JSON}")
          if [ -z "${RUN_ID}" ]; then
            echo "Failed to start Apify run."
            sed -n '1,200p' "${RUN_JSON}" || true
            exit 1
          fi
          echo "Apify run started: ${RUN_ID}"

          while :; do
            RESP=$(curl -sS -H "Authorization: Bearer ${APIFY_TOKEN}" "https://api.apify.com/v2/actor-runs/${RUN_ID}")
            STATUS=$(printf "%s" "${RESP}" | python -c 'import json,sys; d=json.loads(sys.stdin.read()); print(d.get("data",{}).get("status",""))' || true)
            echo "  status: ${STATUS}"
            if [ "${STATUS}" = "SUCCEEDED" ]; then
              break
            elif [ "${STATUS}" = "FAILED" ] || [ "${STATUS}" = "TIMED-OUT" ] || [ "${STATUS}" = "ABORTED" ]; then
              echo "Run ended with status: ${STATUS}"
              printf "%s\n" "${RESP}" | sed -n '1,200p'
              exit 1
            fi
            sleep 30
          done

          DATASET_ID=$(printf "%s" "${RESP}" | python -c 'import json,sys; d=json.loads(sys.stdin.read()); print(d.get("data",{}).get("defaultDatasetId",""))')
          if [ -z "${DATASET_ID}" ]; then
            echo "No dataset id found."
            printf "%s\n" "${RESP}" | sed -n '1,200p'
            exit 1
          fi

          curl -sS "https://api.apify.com/v2/datasets/${DATASET_ID}/items?format=csv&clean=true&token=${APIFY_TOKEN}" -o "${OUT_RAW}"
          if [ ! -s "${OUT_RAW}" ]; then
            echo "Downloaded CSV is empty."
            exit 1
          fi

          echo "Raw CSV preview:"
          head -5 "${OUT_RAW}"

      # 2) Normalize: robust shortCode + timestamp discovery; parent posts only; latest 30
      - name: Normalize CSV for baseline_check.py
        run: |
          python - <<'PY'
          import pandas as pd, numpy as np, re

          src = "pipeline/latest_posts_raw.csv"
          dst = "pipeline/latest_posts.csv"
          df = pd.read_csv(src, dtype=str, keep_default_na=False)

          # Map case-insensitive names
          lower = {c.lower(): c for c in df.columns}
          def col(*names):
            for n in names:
              if n and n.lower() in lower:
                return lower[n.lower()]
            return None

          # Candidate columns
          sc_col = col("shortCode","short_code","shortcode")
          posturl_col = col("postUrl","url","permalink","link")

          # Try to extract shortCode from URL if missing
          if not sc_col and posturl_col:
            # build a derived shortCode column
            def extract_sc(u):
              u = str(u)
              m = re.search(r"/(?:p|reel)/([A-Za-z0-9_-]+)/?", u)
              return m.group(1) if m else ""
            df["__shortCode_from_url"] = df[posturl_col].map(extract_sc)
            sc_col = "__shortCode_from_url"

          # Timestamp candidates (ISO or numeric)
          ts_candidates = [
            "timestamp","takenAt","taken_at","takenAtISO","taken_at_iso","takenAtUtc","taken_at_utc",
            "takenAtTimestamp","taken_at_timestamp","created_time","createdAt","published_time",
            "date","time","datetime"
          ]
          ts_cols = [c for c in (col(x) for x in ts_candidates) if c]

          def parse_ts_row(row):
            for c in ts_cols:
              val = str(row.get(c,"")).strip()
              if not val:
                continue
              # try ISO first
              dt = pd.to_datetime(val, errors="coerce", utc=True)
              if pd.notna(dt):
                return dt
              # try seconds then ms
              num = pd.to_numeric(val, errors="coerce")
              if pd.notna(num):
                for unit in ["s","ms"]:
                  dt = pd.to_datetime(num, unit=unit, errors="coerce", utc=True)
                  if pd.notna(dt):
                    return dt
            return pd.NaT

          # Build parent-only frame with derived fields
          df["_sc"] = df[sc_col] if sc_col else ""
          if isinstance(df["_sc"], str):
            df["_sc"] = df["_sc"].astype(str)
          df["_sc"] = df["_sc"].astype(str).str.strip()

          if posturl_col:
            df["_postUrl"] = df[posturl_col]
          else:
            df["_postUrl"] = ""

          # Parse timestamps row-wise
          dt_series = df.apply(parse_ts_row, axis=1)
          df["_dt"] = dt_series

          # Keep only rows with a shortcode and a timestamp
          parent = df.loc[(df["_sc"].ne("")) & (df["_dt"].notna())].copy()
          if parent.empty:
            print("No parent rows with shortCode + timestamp found. Raw columns:", list(df.columns))
            # write an empty but valid file so downstream steps don't explode
            pd.DataFrame(columns=["date_v4","shortCode","postUrl","type","caption",
                                  "likesCount","commentsCount","views","displayUrl","videoUrl"]).to_csv(dst, index=False)
            raise SystemExit(0)

          parent["date_v4"] = parent["_dt"].dt.strftime("%Y-%m-%d")

          # Other optional fields
          type_col = col("type","productType","media_type")
          cap_col  = col("caption","caption_v4","caption_v3")
          like_col = col("likesCount","likes","like_count","edge_media_preview_like.count")
          com_col  = col("commentsCount","comments","comment_count")
          vvc_col  = col("videoViewCount","video_views","playCount","videoPlayCount")
          disp_col = col("displayUrl","imageUrl","thumbnailUrl","display_url")
          vid_col  = col("videoUrl","video_url")

          # Take first non-empty per shortcode
          def first_nonempty(series):
            for v in series:
              s = str(v) if pd.notna(v) else ""
              if s.strip():
                return s
            return ""

          rows=[]
          for sc, grp in parent.groupby("_sc"):
            row = {
              "shortCode": sc,
              "postUrl": first_nonempty(grp["_postUrl"]),
              "caption": first_nonempty(grp[cap_col]) if cap_col in grp.columns else "",
              "type": first_nonempty(grp[type_col]) if type_col in grp.columns else "",
              "likesCount": first_nonempty(grp[like_col]) if like_col in grp.columns else "",
              "commentsCount": first_nonempty(grp[com_col]) if com_col in grp.columns else "",
              "displayUrl": first_nonempty(grp[disp_col]) if disp_col in grp.columns else "",
              "videoUrl": first_nonempty(grp[vid_col]) if vid_col in grp.columns else "",
              "date_v4": first_nonempty(grp["date_v4"]),
              "__dt": grp["_dt"].max(),
            }
            # map views from any numeric video view field if present
            if vvc_col and vvc_col in grp.columns:
              try:
                vv = pd.to_numeric(grp[vvc_col].replace("", np.nan), errors="coerce").max()
                row["views"] = "" if pd.isna(vv) else str(int(vv))
              except Exception:
                row["views"] = first_nonempty(grp[vvc_col])
            else:
              row["views"] = ""
            rows.append(row)

          clean = pd.DataFrame(rows)
          clean["__dt"] = pd.to_datetime(clean["__dt"], errors="coerce", utc=True)
          clean = clean.sort_values("__dt", ascending=False).head(30).reset_index(drop=True)

          # Final tidy
          final_cols = ["date_v4","shortCode","postUrl","type","caption",
                        "likesCount","commentsCount","views","displayUrl","videoUrl"]
          for c in final_cols:
            if c not in clean.columns:
              clean[c] = ""
          clean = clean[final_cols]
          clean.to_csv(dst, index=False)

          print("Normalized columns:", list(clean.columns))
          print(clean.head(10).to_string(index=False))
          PY

      # 3) Media manifest (no downloads yet)
      - name: Create media manifest (no downloads yet)
        run: |
          python - <<'PY'
          import pandas as pd, re

          raw = pd.read_csv("pipeline/latest_posts_raw.csv")
          clean = pd.read_csv("pipeline/latest_posts.csv")

          def find(cols, pat): return [c for c in cols if re.search(pat, c, re.I)]

          url_cols  = find(raw.columns, r'(display|image|thumb|media|video).*url$|^url$')
          type_cols = find(raw.columns, r'(is|media).*video|product.*type|type$')
          id_cols   = find(raw.columns, r'shortcode$|^short[_]?code$|postid$|id$')
          id_col = id_cols[0] if id_cols else None

          media_type=None
          if type_cols:
            t = raw[type_cols[0]].astype(str).str.lower()
            media_type = t.map(lambda x: 'video' if ('true' in x or 'video' in x) else 'image')

          out = {}
          out['post_id']    = raw[id_col] if id_col else pd.Series(range(len(raw)))
          out['media_type'] = media_type if media_type is not None else pd.Series(['unknown']*len(raw))
          for c in url_cols: out[c] = raw[c]
          out['shortCode']  = clean.get('shortCode')

          pd.DataFrame(out).to_csv("pipeline/media_manifest.csv", index=False)
          PY

      # 4) Download IG videos (yt-dlp) and extract 10 frames each
      - name: Download IG videos (yt-dlp) and extract 10 frames each
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, subprocess, shlex, pandas as pd

          os.makedirs("media_video", exist_ok=True)
          os.makedirs("frames_video", exist_ok=True)

          df = pd.read_csv("pipeline/latest_posts.csv")
          urls = []
          for _, r in df.iterrows():
            u = str(r.get("postUrl") or "").strip()
            if u.startswith("http"):
              urls.append(u)
          # preserve order, remove dups
          seen=set(); urls=[u for u in urls if not (u in seen or seen.add(u))]

          downloaded = []
          for u in urls:
            if len(downloaded) >= 5: break
            print("Attempting video download:", u)
            cmd = f"yt-dlp -S ext:mp4:m4a --no-warnings -o 'media_video/%(id)s.%(ext)s' {shlex.quote(u)}"
            rc = subprocess.run(cmd, shell=True).returncode
            if rc == 0:
              mp4s = sorted([f for f in os.listdir('media_video') if f.endswith('.mp4')], key=lambda x: os.path.getmtime(os.path.join('media_video',x)), reverse=True)
              if mp4s:
                path=os.path.join('media_video', mp4s[0])
                downloaded.append(path)
                print("Downloaded:", path)
            else:
              print("yt-dlp failed (non-fatal).")

          if not downloaded:
            print("No videos downloaded; skipping frame extraction.")
            raise SystemExit(0)

          def ffprobe_duration(path):
            try:
              out = subprocess.check_output(["ffprobe","-v","error","-select_streams","v:0","-show_entries","stream=duration","-of","default=nw=1:nk=1",path]).decode().strip()
              return float(out) if out else None
            except Exception:
              return None

          for vid in downloaded:
            base = os.path.splitext(os.path.basename(vid))[0]
            dur = ffprobe_duration(vid)
            if not dur or dur <= 0:
              print("Could not probe duration for", vid)
              continue
            stamps = [(i+1)*dur/11 for i in range(10)]  # 10 evenly spaced
            for idx,t in enumerate(stamps,1):
              out = f"frames_video/{base}_frame_{idx:02d}.jpg"
              subprocess.run(["ffmpeg","-y","-ss",f"{t:.3f}","-i",vid,"-frames:v","1","-q:v","2",out],
                             stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
              print("Saved frame:", out)
          PY

      # 5) Upload artifacts: CSVs, manifest, any downloaded videos, and extracted frames
      - name: Upload artifacts (csvs, manifest, videos, frames)
        uses: actions/upload-artifact@v4
        with:
          name: apify_csvs_media_and_frames
          path: |
            pipeline/latest_posts_raw.csv
            pipeline/latest_posts.csv
            pipeline/media_manifest.csv
            media_video
            frames_video

      # 6) (Optional) Baseline to Notion
      - name: Run baseline to Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DB_MASPLUS: ${{ secrets.NOTION_DB_MASPLUS }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          BASELINE_ER_MEDIAN: '0.95'
          BASELINE_IVR_MEDIAN: '3.09'
          HC_INPUT_CSV: pipeline/latest_posts.csv
          HC_FOLLOWERS: '485000'
        run: python pipeline/baseline_check.py

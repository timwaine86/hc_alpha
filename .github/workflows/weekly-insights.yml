name: weekly-insights

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'  # Mondays 06:00 UTC

permissions:
  contents: read

jobs:
  weekly_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas python-dateutil python-dotenv requests openai==1.51.2 tenacity

      # Start Apify run -> poll until SUCCEEDED -> download CSV
      - name: Fetch latest MAS+ data from Apify
        env:
          APIFY_TOKEN: ${{ secrets.APIFY_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p pipeline
          OUT="pipeline/latest_posts_raw.csv"
          RUN_JSON="pipeline/apify_run.json"

          JSON_PAYLOAD='{
            "username": ["masbymessi"],
            "maxItems": 30,
            "proxy": { "useApifyProxy": true }
          }'

          curl -sS -X POST \
            -H "Authorization: Bearer ${APIFY_TOKEN}" \
            -H "Content-Type: application/json" \
            "https://api.apify.com/v2/acts/apify~instagram-post-scraper/runs?token=${APIFY_TOKEN}" \
            -d "${JSON_PAYLOAD}" > "${RUN_JSON}"

          RUN_ID=$(python -c 'import json,sys; d=json.load(open(sys.argv[1])); print(d.get("data",{}).get("id",""))' "${RUN_JSON}")
          [ -n "${RUN_ID}" ] || { echo "Failed to start run"; sed -n '1,200p' "${RUN_JSON}"; exit 1; }

          echo "Apify run started: ${RUN_ID} — polling…"
          MAX_TRIES=72
          i=0
          STATUS=""
          RESP=""
          while [ ${i} -lt ${MAX_TRIES} ]; do
            RESP=$(curl -sS -H "Authorization: Bearer ${APIFY_TOKEN}" "https://api.apify.com/v2/actor-runs/${RUN_ID}")
            STATUS=$(printf "%s" "${RESP}" | python -c 'import json,sys; d=json.loads(sys.stdin.read()); print(d.get("data",{}).get("status",""))')
            echo "  status: ${STATUS}"
            case "${STATUS}" in
              SUCCEEDED) break;;
              FAILED|TIMED-OUT|ABORTED) echo "Run ended: ${STATUS}"; printf "%s\n" "${RESP}" | sed -n '1,200p'; exit 1;;
            esac
            sleep 5; i=$((i+1))
          done
          [ "${STATUS}" = "SUCCEEDED" ] || { echo "Timeout waiting for Apify"; exit 1; }

          DATASET_ID=$(printf "%s" "${RESP}" | python -c 'import json,sys; d=json.loads(sys.stdin.read()); print(d.get("data",{}).get("defaultDatasetId",""))')
          [ -n "${DATASET_ID}" ] || { echo "No dataset id"; printf "%s\n" "${RESP}" | sed -n '1,200p'; exit 1; }

          curl -sS "https://api.apify.com/v2/datasets/${DATASET_ID}/items?format=csv&clean=true&token=${APIFY_TOKEN}" -o "${OUT}"
          [ -s "${OUT}" ] || { echo "Downloaded CSV is empty."; exit 1; }

          echo "Raw CSV preview:"
          head -5 "${OUT}"

      # Normalize CSV: create date_v4 and keep common fields
      - name: Normalize CSV for baseline_check.py
        run: |
          python - <<'PY'
          import pandas as pd, sys
          src = "pipeline/latest_posts_raw.csv"
          dst = "pipeline/latest_posts.csv"
          df = pd.read_csv(src)

          # Lowercase map for easy lookup
          lower_map = {c.lower(): c for c in df.columns}

          # Candidate date fields from Apify/IG actors
          date_candidates = ["date_v4","date_v3","date","timestamp","takenat","taken_at","published_time","takenatiso"]
          date_col = next((lower_map[c] for c in date_candidates if c in lower_map), None)
          if date_col is None:
            raise SystemExit(f"No date-like column found. Columns: {list(df.columns)}")

          s = df[date_col]
          # Parse robustly
          d = pd.to_datetime(s, errors="coerce", utc=True)
          if d.isna().all():
            # try unix seconds then ms
            d = pd.to_datetime(pd.to_numeric(s, errors="coerce"), unit="s", utc=True)
            if d.isna().all():
              d = pd.to_datetime(pd.to_numeric(s, errors="coerce"), unit="ms", utc=True)

          if d.isna().all():
            raise SystemExit(f"Could not parse dates from column {date_col}")

          df["date_v4"] = d.dt.strftime("%Y-%m-%d")

          # Optional: ensure some useful columns exist
          rename_map = {}
          if "shortcode" in lower_map: rename_map[lower_map["shortcode"]] = "shortCode"
          if "short_code" in lower_map: rename_map[lower_map["short_code"]] = "shortCode"
          df = df.rename(columns=rename_map)

          df.to_csv(dst, index=False)
          print("Normalized columns:", list(df.columns))
          print("Sample:")
          print(df.head(5).to_string())
          PY

      - name: Run baseline → Notion
        env:
          NOTION_TOKEN:       ${{ secrets.NOTION_TOKEN }}
          NOTION_DB_MASPLUS:  ${{ secrets.NOTION_DB_MASPLUS }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          BASELINE_ER_MEDIAN: '0.95'
          BASELINE_IVR_MEDIAN: '3.09'
          HC_INPUT_CSV:       pipeline/latest_posts.csv   # use normalized file
          HC_FOLLOWERS:       '485000'
        run: python pipeline/baseline_check.py
